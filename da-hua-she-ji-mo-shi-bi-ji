<!DOCTYPE html>
<html lang="">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 6.0.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Monda:300,300italic,400,400italic,700,700italic|PT Mono:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">
<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">

<script id="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"yeshu.work","root":"/","scheme":"Mist","version":"7.8.0","exturl":false,"sidebar":{"position":"right","display":"post","padding":18,"offset":12,"onmobile":false},"copycode":{"enable":false,"show_result":false,"style":null},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}}};
  </script>

  <meta name="description" content="##大话设计模式笔记  24种设计模式，4大原则 简单工厂模式和策略模式很像 工厂模式是简单工厂的改进版 开源项目二次开发时，可以利用装饰模式添加新功能 浏览器中用代理模式来优化下载 原型模式就是Java里面的clone()方法  ###1.简单工厂模式 &#x2F;&#x2F;优点：核心是工厂类，这个类负责产品的创建，而客户端可以免去产品创建的责任，实现了责任的分割。&#x2F;&#x2F;缺点：工厂类集中了所有产品的创建逻辑，如果增">
<meta property="og:type" content="article">
<meta property="og:title" content="大话设计模式笔记">
<meta property="og:url" content="http://yeshu.work/da-hua-she-ji-mo-shi-bi-ji">
<meta property="og:site_name" content="yeshu blog">
<meta property="og:description" content="##大话设计模式笔记  24种设计模式，4大原则 简单工厂模式和策略模式很像 工厂模式是简单工厂的改进版 开源项目二次开发时，可以利用装饰模式添加新功能 浏览器中用代理模式来优化下载 原型模式就是Java里面的clone()方法  ###1.简单工厂模式 &#x2F;&#x2F;优点：核心是工厂类，这个类负责产品的创建，而客户端可以免去产品创建的责任，实现了责任的分割。&#x2F;&#x2F;缺点：工厂类集中了所有产品的创建逻辑，如果增">
<meta property="og:locale">
<meta property="article:published_time" content="2015-09-05T22:12:55.000Z">
<meta property="article:modified_time" content="2015-09-05T22:15:05.000Z">
<meta property="article:author" content="yeshu">
<meta name="twitter:card" content="summary">

<link rel="canonical" href="http://yeshu.work/da-hua-she-ji-mo-shi-bi-ji">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'default'
  };
</script>

  <title>大话设计模式笔记 | yeshu blog</title>
  






  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <span class="logo-line-before"><i></i></span>
      <h1 class="site-title">yeshu blog</h1>
      <span class="logo-line-after"><i></i></span>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
    </div>
  </div>
</div>




<nav class="site-nav">
  <ul id="menu" class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>Home</a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>Categories</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>About</a>

  </li>
  </ul>
</nav>




</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content post posts-expand">
            

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="default">
    <link itemprop="mainEntityOfPage" href="http://yeshu.work/da-hua-she-ji-mo-shi-bi-ji">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="yeshu">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="yeshu blog">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          大话设计模式笔记
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">Posted on</span>
              

              <time title="Created: 2015-09-06 06:12:55 / Modified: 06:15:05" itemprop="dateCreated datePublished" datetime="2015-09-06T06:12:55+08:00">2015-09-06</time>
            </span>

          

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <p>##大话设计模式笔记</p>
<ul>
<li>24种设计模式，4大原则</li>
<li>简单工厂模式和策略模式很像</li>
<li>工厂模式是简单工厂的改进版</li>
<li>开源项目二次开发时，可以利用装饰模式添加新功能</li>
<li>浏览器中用代理模式来优化下载</li>
<li>原型模式就是Java里面的clone()方法</li>
</ul>
<p>###1.简单工厂模式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优点：核心是工厂类，这个类负责产品的创建，而客户端可以免去产品创建的责任，实现了责任的分割。</span></span><br><span class="line"><span class="comment">//缺点：工厂类集中了所有产品的创建逻辑，如果增加新的产品必须修改工厂角色的源码。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title">createOperate</span><span class="params">(string operate)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Operation oper = null;</span><br><span class="line">		<span class="built_in"><span class="keyword">switch</span></span>(operate)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">				oper = <span class="keyword">new</span> <span class="built_in">OperationAdd</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">				oper = <span class="keyword">new</span> <span class="built_in">OperationSub</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">				oper = <span class="keyword">new</span> <span class="built_in">OperationMul</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">				oper = <span class="keyword">new</span> <span class="built_in">OperationDiv</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> oper;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Operation oper;</span><br><span class="line">oper = OperationFactory.<span class="built_in">createOperate</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">oper.NumberA = <span class="number">1</span>;</span><br><span class="line">oper.NumberB = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> result = oper.<span class="built_in">GetResult</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>###2.策略模式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//策略模式就是用来封装一系列的算法.</span></span><br><span class="line"><span class="comment">//用户使用工厂模式产生算法，在通过CashContext类直接使用算法。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CashContext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	CashSuper cs = null;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CashSuper</span><span class="params">(String type)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;正常收费&quot;</span>:</span><br><span class="line">			CashNormal cs0 = <span class="keyword">new</span> <span class="built_in">CashNormal</span>();</span><br><span class="line">			cs = cs0;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;满300烦100&quot;</span>:</span><br><span class="line">			CashReturn cr1 = <span class="keyword">new</span> <span class="built_in">CashReturn</span>(<span class="string">&quot;300&quot;</span>, <span class="string">&quot;100&quot;</span>);</span><br><span class="line">			cs = cs1;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;打8折&quot;</span>:</span><br><span class="line">			CashRebate cr2 = <span class="keyword">new</span> <span class="built_in">CashRebate</span>(<span class="string">&quot;0.8&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span><span class="params">(<span class="keyword">double</span> money)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cs.<span class="built_in">acceptCash</span>(money);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">CashContext csuper = <span class="keyword">new</span> <span class="built_in">CashContext</span>(<span class="string">&quot;正常收费&quot;</span>);</span><br><span class="line"><span class="keyword">double</span> price = csuper.<span class="built_in">GetResult</span>(<span class="number">100</span>d);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>###3.装饰模式<br><code>动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> abstract <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> :</span> Component</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> :</span> Component</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">protected</span> Component component;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetComponent</span><span class="params">(Component component)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.component = component;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(null != component)</span><br><span class="line">		&#123;</span><br><span class="line">			component.<span class="built_in">Operation</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">ConcreteComponent c = <span class="keyword">new</span> <span class="built_in">ConcreteComponent</span>();</span><br><span class="line">ConcreteDecoratorA d1 = <span class="keyword">new</span> <span class="built_in">ConcreteDecoratorA</span>();</span><br><span class="line">ConcreteDecoratorB d2 = <span class="keyword">new</span> <span class="built_in">ConcreteDecoratorB</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰</span></span><br><span class="line">d1.<span class="built_in">SetComponent</span>(c);</span><br><span class="line">d2.<span class="built_in">SetComponent</span>(d1);</span><br><span class="line"><span class="comment">//执行操作</span></span><br><span class="line">d2.<span class="built_in">Operation</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>###4.代理模式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> abstract <span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> :</span> Subject</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> :</span> Subject</span><br><span class="line">&#123;</span><br><span class="line">	RealSubject realSubject = <span class="keyword">new</span> <span class="built_in">RealSubject</span>();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		realSubject.<span class="built_in">Requst</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端使用</span></span><br><span class="line">Proxy proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>();</span><br><span class="line">proxy.<span class="built_in">Request</span>();</span><br></pre></td></tr></table></figure>

<p>###5.工厂方法模式<br><code>克服了简单工厂违背开放-封闭原则的缺点，又保持了封装对象创建过程的优点。</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂抽象类</span></span><br><span class="line">interface IFactory</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function">LeiFeng <span class="title">CreateLeiFeng</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两个工厂子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UndergraduateFactory</span> :</span> IFactory</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> LeiFeng <span class="title">CreateLeiFeng</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolunteerFactory</span> :</span> IFactory</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> LeiFeng <span class="title">CreanteLeiFeng</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端决定使用哪个工厂</span></span><br><span class="line">IFactory factory = <span class="keyword">new</span> <span class="built_in">UndergraduateFactory</span>();</span><br><span class="line">LeiFeng student = factory.<span class="built_in">CreateLeiFeng</span>();</span><br></pre></td></tr></table></figure>
<p>###6.原型模式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用场景：一般在初始化的信息不发生变化的情况下，克隆是最好的办法。这即隐藏了对象的创建细节，又对性能是大大的提高</span></span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">private</span> String id;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Prototype</span><span class="params">(string id)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> string id</span><br><span class="line">	&#123;</span><br><span class="line">		get &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> abstract Prototype <span class="title">Clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的原型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContretePrototype</span> :</span> Prototype</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcretePrototype</span><span class="params">(string id)</span> : base(id)</span></span><br><span class="line"><span class="function">	&#123;</span></span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Prototype <span class="title">Clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//针对引用遍历需要深拷贝</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端使用</span></span><br><span class="line">ConcretePrototype p1 = <span class="keyword">new</span> <span class="built_in">ConcretePrototype</span>(<span class="string">&quot;I&quot;</span>);</span><br><span class="line">ConcretePrototype p2 = (ConcretePrototype)p1.<span class="built_in">Clone</span>();</span><br></pre></td></tr></table></figure>
<p>###7.模板方法模式</p>
<p>###8.外观模式</p>
<p>###9.建造者模式</p>
<p>###10.观察者模式</p>
<p>###11.抽象工厂模式</p>
<p>###12.状态模式</p>
<p>###13.适配器模式</p>
<p>###14.备忘录模式</p>
<p>###15.组合模式</p>
<p>###16.迭代器模式</p>
<p>###17.单例模式</p>
<p>###18.桥接模式</p>
<p>###19.命令模式</p>
<p>###20.职责链模式</p>
<p>###21.中介者模式</p>
<p>###22.享元模式</p>
<p>###23.解释器模式</p>
<p>###24.访问者模式</p>
<p>###单一职责原则<br><code>就一个类而言，应该仅有一个引起它变化的原因</code></p>
<ul>
<li>发现职责并把哪些职责相互分离</li>
<li>如果你能想到多于一个动机去改变一个类，那么这个类就具有多于一个的职责</li>
</ul>
<p>###开放-封闭原则<br><code>是说软件实体（类、模块、函数等等）应该可以扩展，但是不可以修改。对于扩展是开放的，对于更改是封闭的</code></p>
<ul>
<li>面对需求，对程序的改动是通过增加新的代码进行的，而不是更改现有的代码</li>
<li>猜测出最有可能发生变化的种类，然后构造出抽象来隔离那些变化</li>
</ul>
<p>###依赖倒转原则<br><code>A. 高层模块不应该依赖底层模块。两个都应该依赖抽象 B. 抽象不应该依赖细节。细节应该依赖抽象</code></p>
<ul>
<li>针对接口编程，不要针对实现编程</li>
<li>里氏代换原则：子类型必须能够替换掉他们的父类型。</li>
</ul>
<p>###迪米特法则</p>
<p>###模式总结</p>

    </div>

    
    
    

      <footer class="post-footer">

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/android-binderkuang-jia" rel="prev" title="Android Binder框架">
      <i class="fa fa-chevron-left"></i> Android Binder框架
    </a></div>
      <div class="post-nav-item">
    <a href="/wei-shi-yao-shi-yong-fragmenter-bu-shi-yong-activitygroupactivtyde-zu-he" rel="next" title="为什么使用Fragment而不使用ActivityGroup+Activty的组合？">
      为什么使用Fragment而不使用ActivityGroup+Activty的组合？ <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



          </div>
          

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          Table of Contents
        </li>
        <li class="sidebar-nav-overview">
          Overview
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">yeshu</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives">
          <span class="site-state-item-count">138</span>
          <span class="site-state-item-name">posts</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">3</span>
        <span class="site-state-item-name">categories</span></a>
      </div>
      <div class="site-state-item site-state-tags">
        <span class="site-state-item-count">4</span>
        <span class="site-state-item-name">tags</span>
      </div>
  </nav>
</div>
  <div class="links-of-author motion-element">
      <span class="links-of-author-item">
        <a href="https://github.com/yeshu-cn" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;yeshu-cn" rel="noopener" target="_blank"><i class="fab fa-github fa-fw"></i>GitHub</a>
      </span>
  </div>



      </div>

    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2022</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">yeshu</span>
</div>
  <div class="powered-by">Powered by <a href="https://hexo.io/" class="theme-link" rel="noopener" target="_blank">Hexo</a> & <a href="https://mist.theme-next.org/" class="theme-link" rel="noopener" target="_blank">NexT.Mist</a>
  </div>

        








      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/muse.js"></script>


<script src="/js/next-boot.js"></script>




  















  

  

</body>
</html>
